View(surveys)
ls()
rm()
ls()
rm(ls())
teachers_salaries <- read.csv("DP_LIVE_30032018052803487.csv")
str(teachers_salaries) # dataset structure
summary(teachers_salaries)
# display table of how many Countries
table(teachers_salaries$LOCATION)
View(teachers_salaries)
library(dplyr)
teachers_salaries <- teachers_salaries %>% select(-c("FREQUENCY", "Flag Codes"))
library(dplyr)
teachers_salaries <- teachers_salaries %>%
select(c("LOCATION", "SUBJECT", "MEASURE", "TIME", "Value"))
View(teachers_salaries)
View(teachers_salaries)
# histogram plot of teachers salaries
hist(teachers_salaries$Value)
# histogram plot of teachers salaries
hist(teachers_salaries$Value)
# or taking log of salaries as the histogram looks strongly right-skewed
hist(log10(teachers_salaries$Value))
# histogram plot of teachers salaries
hist(teachers_salaries$Value)
# or taking log of salaries as the histogram looks strongly right-skewed
hist(log(teachers_salaries$Value))
# histogram plot of teachers salaries
hist(teachers_salaries$Value)
# or taking qquare root of salaries as the histogram looks strongly right-skewed
hist(sqrt(teachers_salaries$Value))
# histogram plot of teachers salaries
hist(teachers_salaries$Value)
# or taking square root of salaries as the histogram looks strongly right-skewed
hist(sqrt(teachers_salaries$Value))
# what about from a certain time say 2015?
salaries_2015 <- teachers_salaries %>% filter(TIME == 2015)
typeof(teachers_salaries$TIME)
teachers_salaries$TIME <- as.factor(teachers_salaries$TIME)
teachers_salaries$TIME <- as.factor(teachers_salaries$TIME)
typeof(teachers_salaries$TIME)
teachers_salaries$TIME <- factor(teachers_salaries$TIME)
typeof(teachers_salaries$TIME)
teachers_salaries$TIME <- factor(teachers_salaries$TIME)
typeof(teachers_salaries$TIME)
teachers_salaries$TIME
teachers_salaries$TIME <- factor(teachers_salaries$TIME)
typeof(teachers_salaries$TIME)
teachers_salaries$TIME[1] + teachers_salaries$TIME[2]
teachers_salaries$TIME <- as.factor(teachers_salaries$TIME)
View(teachers_salaries)
View(teachers_salaries)
# histogram plot of teachers salaries
hist(teachers_salaries_2015$Value)
# histogram plot of teachers salaries
hist(teachers_salaries_2015$Value)
# histogram plot of teachers salaries
hist(teachers_salaries_2015$Value)
unique(teachers_salaries$LOCATION)
summary(teachers_salaries)
unique(teachers_salaries$SUBJECT)
library(RMySQL)
library(sqldf)
install.packages(c("BH", "bindr", "bindrcpp", "curl", "futile.options", "hms", "htmlwidgets", "httpuv", "knitr", "lambda.r", "maps", "openssl", "pillar", "plogr", "Rcpp", "rlang", "rmarkdown", "sourcetools", "stringr", "tidyselect", "tinytex", "VennDiagram", "withr", "yaml"))
install.packages("sqldf")
teachers <- read.csv("DP_LIVE_30042018021532726.csv")
teachers
query <- "select * from teachers_salaries inner join salaries on teachers_salaries.LOCATION = salaries.LOCATION"
x <- sqldf(query)
library(sqldf)
x <- sqldf(query)
salaries <- read.csv("DP_LIVE_30042018021532726.csv")
rm(teachers)
x <- sqldf(query)
x
head(x)
school_progress_report_scores <- read.csv("2006-2007_School_Progress_Report.csv")
school_progress_report_scores
nrow(school_progress_report_scores)
str(school_progress_report_scores)
summary(school_progress_report_scores)
school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE <-
as.numeric(school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE)
hist(school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE)
#hist(school_progress_report_scores$PERFORMANCE.CATEGORY.SCORE)
#hist(school_progress_report_scores$PROGRESS.CATEGORY.SCORE)
school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE <-
as.numeric(school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE)
school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE
school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE <-
as.numeric(as.character(school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE))
school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE
View(school_progress_report_scores)
View(school_progress_report_scores)
View(school_progress_report_scores)
View(school_progress_report_scores)
ml_overall_env <- lm(OVERALL.SCORE ~ ENVIRONMENT.CATEGORY.SCORE, data = school_progress_report_scores)
summary(ml_overall_env)
rm(ml_overall_env)
school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE <-
as.numeric(as.character(school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE))
school_progress_report_scores$PERFORMANCE.CATEGORY.SCORE <-
as.numeric(as.character(school_progress_report_scores$PERFORMANCE.CATEGORY.SCORE))
school_progress_report_scores$PROGRESS.CATEGORY.SCORE <-
as.numeric(as.character(school_progress_report_scores$PROGRESS.CATEGORY.SCORE))
school_progress_report_scores$OVERALL.SCORE <-
as.numeric(as.character(school_progress_report_scores$OVERALL.SCORE))
ml_overall_env <- lm(OVERALL.SCORE ~ ENVIRONMENT.CATEGORY.SCORE, data = school_progress_report_scores)
summary(ml_overall_env)
plot(school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE, school_progress_report_scores$OVERALL.SCORE)
abline(ml_overall_env)
hist(ml_overall_env$residuals)
plot(ml_overall_env$residuals ~ school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE)
plot(ml_overall_env$residuals ~ school_progress_report_scores$ENVIRONMENT.CATEGORY.SCORE, na.rm = FALSE)
names(school_progress_report_scores)
ml_overall_env <- lm(OVERALL.SCORE ~ ENVIRONMENT.CATEGORY.SCORE + PERFORMANCE.CATEGORY.SCORE + PROGRESS.CATEGORY.SCORE, data = school_progress_report_scores)
summary(ml_overall_env)
ml_overall_env <- lm(OVERALL.SCORE ~ ENVIRONMENT.CATEGORY.SCORE + PERFORMANCE.CATEGORY.SCORE + PROGRESS.CATEGORY.SCORE + SCHOOL.LEVEL., data = school_progress_report_scores)
summary(ml_overall_env)
ml_overall_env <- lm(OVERALL.SCORE ~ ENVIRONMENT.CATEGORY.SCORE + PERFORMANCE.CATEGORY.SCORE + PROGRESS.CATEGORY.SCORE + SCHOOL.LEVEL. + GRADE, data = school_progress_report_scores)
summary(ml_overall_env)
ml_overall_env
ml_overall_env$model
ml_overall_env$coefficients
confint(ml_overall_env)
confint.lm(ml_overall_env)
predict(ml_overall_env)
confint(ml_overall_env)
coef(ml_overall_env)
unique(school_progress_report_scores$SCHOOL)
sort(unique(school_progress_report_scores$SCHOOL))
View(school_progress_report_scores)
library(dplyr)
x <- school_progress_report_scores$DBN
x
apply(x,1,substr)
substr("abcdef", 2, 4)
substr("abcdef", 2, 2)
apply(x,1,substr, 3,3)
substr(x,3,3)
library(plyr)
with(progress_report_cleaned, plot(Overall_Score ~ Grade))
# fitting our linear model
lm_overall_score <- lm(Overall_Score ~ Borough + District + School_Level +
Grade + Environment_Score +
Performance_Score +
Progress_Score,
data = progress_report_cleaned)
sqrt(0.9806)
# plot the distirbution of residuals
# if a valid model the distribution should be nearly normal (bell-shaped)
hist(lm_overall_score$residuals)
# plot the distirbution of residuals
# if a valid model the distribution should be nearly normal (bell-shaped)
hist(lm_overall_score$residuals)
ml_overall_env
ml_overall_env$coefficients
names(ml_overall_env)
ml_overall_env$model
ml_overall_env$terms
names(ml_overall_env)
ml_overall_env$effects
names(ml_overall_env)
ml_overall_env$effects$qr
ml_overall_env$effects$xlevels
ml_overall_env$effects$call
lm
10.9854 + (-0.5095*1)
10.9854 + (-0.7871*2)
10.9854 + (-0.5967*3)
10.9854 + (-0.2064*4)
multiLines(m_bty_gen)
-0.5095*2
-1.019 +10.9854
